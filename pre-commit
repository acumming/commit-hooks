#!/usr/bin/env python

import os
import re
import sys
import subprocess

modified = re.compile('^(?:M|A)(\s+)(?P<name>.*)')

CHECKS = [

    {
        'output': 'Checking for trailing whitespace...',
        'command': 'grep -n "\s$" %s',
        'match_files': ['.*'],
        'print_filename': True
    },
    {
        'output': 'Checking for console.log()...',
        'command': 'grep -n console.log %s',
        'match_files': ['.*\.js$', '.*\.html', '.*\.php'],
        'print_filename': True,
    },
    {
        'output': 'Checking for SASS changes...',
        'command': 'sass --quiet --update %s',
        'match_files': ['.*\.scss$'],
        'print_filename': True,
    }

]

def matches_file(file_name, match_files):
    return any(re.compile(match_file).match(file_name) for match_file in match_files)

def check_files(files, check):
    result = 0
    print
    print check['output']

    for file_name in files:

        if not 'match_files' in check or matches_file(file_name, check['match_files']):
            if not 'ignore_files' in check or not matches_file(file_name, check['ignore_files']):
                command = check['command'] % file_name
                process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
                out, err = process.communicate()
                print 'Running: %s' % command
                if out or err:
                    if check['print_filename']:
                        prefix = '\t%s ~> ' % file_name
                    else:
                        prefix = '\t'
                    output_lines = ['%s%s' % (prefix, line) for line in out.splitlines()]
                    print '\n'.join(output_lines)
                    if err:
                        print err
                    result = 1
    return result

def run():

    result = 0

    # Stash any changes to the working tree that are not going to be committed
    # subprocess.call(['git', 'stash', '-u', '--keep-index'], stdout=subprocess.PIPE)

    files = []

    p = subprocess.Popen(['git', 'status', '--porcelain'], stdout=subprocess.PIPE)
    out, err = p.communicate()
    for line in out.splitlines():
        match = modified.match(line)
        if match:
            files.append(match.group('name'))

    for check in CHECKS:
        result = check_files(files, check) or result



    print
    print "Exiting with result code %d..." % result

    if result == 1:
        print
        print "*** WARNING!"
        print "*** Your changes have not been committed."
        print "*** Please fix the above problems and re-commit."
    else:
        print "All checks passed. Committing."

    # Unstash changes to the working tree that we had stashed
    # subprocess.call(['git', 'reset', '--hard'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # subprocess.call(['git', 'stash', 'pop', '-q'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    sys.exit(result)

if __name__ == '__main__':
    print "Running pre-commit hook..."
    run()
